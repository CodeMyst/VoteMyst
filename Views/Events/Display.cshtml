@using VoteMyst.Controllers

@using LeaderboardPlace = Controllers.EventsController.Leaderboard.Place

@inject DatabaseHelperProvider DatabaseHelpers

@model Event
@{
    ViewData["Title"] = Model.Title;
    Layout = "_Layout";

    UserAccount user = ViewBag.UserAccount;

    EventState eventState = Model.GetCurrentState();
    IEnumerable<Entry> entries = Model.Entries;

    if (Model.Settings.HasFlag(EventSettings.RandomizeEntries))
        entries = entries.Shuffle();

    EntryViewModel ConvertEntryToViewModel(Entry entry)
        => new EntryViewModel(entry, user, DatabaseHelpers);
    EntryPlaceViewModel ConvertPlaceToViewModel(LeaderboardPlace place)
        => new EntryPlaceViewModel(place, user, DatabaseHelpers);

    EventViewModel eventViewModel = new EventViewModel(Model, user, DatabaseHelpers);
}

<partial name="_EventPageHeader" for="@eventViewModel" />

@{
    if (!ViewBag.IsGuest && eventState == EventState.Voting
        && Model.Settings.HasFlag(EventSettings.RequireVoteToWin)
        && Model.Entries.Count > 1 && !user.AuthoredVotes.Any(v => v.Entry.Event.ID == Model.ID)
        && DatabaseHelpers.Entries.GetEntryOfUserInEvent(Model, user) != null)
    {
        <div class="message small warning">
            In order to win this event, you need to cast a vote on another entry. You are currently ineligible to win.
        </div>
    }
}

@if (eventState != EventState.Revealed && eventState != EventState.Hidden && Model.Entries.Count > 0)
{
    <div class="entry-display-options">
        <div id="entry-display-option-large"><img src="/img/post-display-large.svg" /></div>
        <div id="entry-display-option-middle"><img src="/img/post-display-middle.svg" /></div>
        <div id="entry-display-option-small"><img src="/img/post-display-smallest.svg" /></div>
    </div>
}

@if (eventState == EventState.Ongoing || eventState == EventState.Voting)
{
    @if (entries.Count() > 0)
    {
        <div class="entries">
            @foreach (Entry entry in entries)
            {
                EntryViewModel viewModel = ConvertEntryToViewModel(entry);
                <partial name="_Entry" for="@viewModel" />
            }
        </div>
    }
    else
    {
        <div class="notice">
            <p>Nothing has been submit yet!</p>
        </div>
    }
}
@if (eventState == EventState.Closed)
{
    EventsController.Leaderboard leaderboard = EventsController.Leaderboard.FromEvent(Model, DatabaseHelpers);

    @if (leaderboard.Places != null && leaderboard.Places.Length > 0)
    {
        <h2>Leaderboard</h2>
        <div class="leaderboard">
            <div class="entries">
                @foreach (LeaderboardPlace place in leaderboard)
                {
                    EntryPlaceViewModel viewModel = ConvertPlaceToViewModel(place);
                    <partial name="_EntryPlace" for="@viewModel" />
                }
            </div>
        </div>
    }
    else
    {
        <div class="notice">
            <p>Nothing has been submit to this event.</p>
        </div>
    }

    @if (leaderboard.NotEligable != null && leaderboard.NotEligable.Length > 0)
    {
        <h2>Not eligible to win</h2>
        <div class="entries">
            @foreach (Entry entry in leaderboard.NotEligable)
            {
                EntryViewModel viewModel = ConvertEntryToViewModel(entry);
                <partial name="_Entry" for="@viewModel" />
            }
        </div>
    }
}

<partial name="_Lightbox" />

@section Scripts {
    <script src="~/js/entry-grid.js" asp-append-version="true"></script>
}