@using Westwind.AspNetCore.Markdown;

@model EventViewModel

<div class="event-page">
    <h1 class="event-title">@Model.Event.Title</h1>
    <p class="event-hosts">Hosted by @Html.Raw(string.Join(", ", Model.Hosts))</p>

    @if (!string.IsNullOrWhiteSpace(Model.Event.Description))
    {
        <div class="event-description">@Markdown.ParseHtmlString(Model.Event.Description)</div>
    }

    <div class="event-datebox">
        @switch(Model.EventState)
        {
            case EventState.Hidden:
                <div class="timer event-timer" --unix-timestamp="@Model.Event.RevealDate.ToUnixSeconds()">Reveal in</div>
                break;
            case EventState.Revealed:
                <div class="timer event-timer" --unix-timestamp="@Model.Event.StartDate.ToUnixSeconds()">Starts in</div>
                break;
            case EventState.Ongoing:
                <div class="timer event-timer" --unix-timestamp="@Model.Event.SubmissionEndDate.ToUnixSeconds()">Submissions close in</div>
                break;
            case EventState.Voting:
                <div class="timer event-timer" --unix-timestamp="@Model.Event.VoteEndDate.ToUnixSeconds()">Voting closes in</div>
                break;
        }
        <div class="event-dates">
            <div class=@(Model.EventState == EventState.Revealed ? "active" : "")>
                <p class="local-date" --unix-timestamp="@Model.Event.StartDate.ToUnixSeconds()">@Model.Event.StartDate</p>
                <p>Event starts</p>
            </div>
            <div class=@(Model.EventState == EventState.Ongoing ? "active" : "")>
                <p class="local-date" --unix-timestamp="@Model.Event.SubmissionEndDate.ToUnixSeconds()">@Model.Event.SubmissionEndDate</p>
                <p>Submissions close</p>
            </div>
            <div class=@(Model.EventState == EventState.Voting ? "active" : "")>
                <p class="local-date" --unix-timestamp="@Model.Event.VoteEndDate.ToUnixSeconds()">@Model.Event.VoteEndDate</p>
                <p>Votings close</p>
            </div>
        </div>
    </div>

    <div class="event-navigation">
        <a href="@Model.Event.GetUrl()">Overview</a>

        @if (User.Identity.IsAuthenticated && Model.EventState == EventState.Ongoing 
            && Model.EventPermissions.HasFlag(EventPermissions.ParticipateInEvent))
        {
            <a href="@Model.Event.GetUrl()/submit">Submit</a>
        }

        @if (Model.EventPermissions.HasFlag(EventPermissions.ManageEntries)
            || Model.IsUserSiteAdmin)
        {
            <a href="@Model.Event.GetUrl()/reports">Reports</a>
        }
        @if (Model.EventPermissions.HasFlag(EventPermissions.EditEventSettings)
            || Model.IsUserSiteAdmin)
        {
            <a href="@Model.Event.GetUrl()/hosts">Hosts</a>
            <a href="@Model.Event.GetUrl()/settings">Settings</a>
        }
    </div>

    <script>
        // Highlight the current event navigation location
        document.currentScript.previousElementSibling.querySelectorAll("a").forEach(link => {
            if (link.href.endsWith(window.location.pathname)) {
                link.classList.add("active");
            }
        });
        document.currentScript.remove();
    </script>
</div>