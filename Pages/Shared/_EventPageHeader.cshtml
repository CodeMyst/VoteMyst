@inject UserProfileBuilder ProfileBuilder
@inject DatabaseHelperProvider DatabaseHelpers

@using VoteMyst.Database

@model Event
@{
    UserAccount currentUser = ProfileBuilder.FromPrincipal(User);
    EventPermissions eventPermissions = DatabaseHelpers.Events.GetUserPermissionsForEvent(currentUser, Model);

    EventState eventState = Model.GetCurrentState();
    string modelUrl = Model.GetUrl();
    string[] hosts = DatabaseHelpers.Events.GetEventHosts(Model)
        .Select(h => $"<a href=\"{h.GetUrl()}\">{h.Username}</a>")
        .ToArray();
}

<div class="event-page">
    <h1 class="event-title">@Model.Title</h1>
    <p class="event-hosts">Hosted by @Html.Raw(string.Join(", ", hosts))</p>
    <p class="event-description">@Model.Description</p>
    <div class="event-datebox">
        <div class="event-dates">
            <div class=@(eventState == EventState.Revealed ? "active" : "")>
                <p class="local-date" --unix-timestamp="@Model.StartDate.ToUnixSeconds()">@Model.StartDate</p>
                <p>Event starts</p>
            </div>
            <div class=@(eventState == EventState.Ongoing ? "active" : "")>
                <p class="local-date" --unix-timestamp="@Model.EndDate.ToUnixSeconds()">@Model.EndDate</p>
                <p>Submissions close</p>
            </div>
            <div class=@(eventState == EventState.Voting ? "active" : "")>
                <p class="local-date" --unix-timestamp="@Model.VoteEndDate.ToUnixSeconds()">@Model.VoteEndDate</p>
                <p>Votings close</p>
            </div>
        </div>
        @switch(eventState)
        {
            case EventState.Hidden:
                <div class="timer event-timer" --unix-timestamp="@Model.RevealDate.ToUnixSeconds()">Reveal in</div>
                break;
            case EventState.Revealed:
                <div class="timer event-timer" --unix-timestamp="@Model.StartDate.ToUnixSeconds()">Starts in</div>
                break;
            case EventState.Ongoing:
                <div class="timer event-timer" --unix-timestamp="@Model.EndDate.ToUnixSeconds()">Submissions close in</div>
                break;
            case EventState.Voting:
                <div class="timer event-timer" --unix-timestamp="@Model.VoteEndDate.ToUnixSeconds()">Voting closes in</div>
                break;
        }
    </div>

    <div class="event-navigation">
        <a href="@modelUrl">Overview</a>

        @if (eventState == EventState.Ongoing)
        {
            <a href="@modelUrl/submit">Submit</a>
        }

        @if (eventPermissions.HasFlag(EventPermissions.EditEventSettings))
        {
            @* <a href="@modelUrl/participants">Participants</a> *@
            <a href="@modelUrl/hosts">Hosts</a>
            <a href="@modelUrl/settings">Settings</a>
        }
    </div>

    <script>
        // Highlight the current event navigation location
        document.currentScript.previousElementSibling.querySelectorAll("a").forEach(link => {
            if (link.href.endsWith(window.location.pathname)) {
                link.classList.add("active");
            }
        });
        document.currentScript.remove();
    </script>
</div>