@using VoteMyst.Database

@inject UserProfileBuilder ProfileBuilder
@inject DatabaseHelperProvider DatabaseHelpers

@model Entry
@{
    UserAccount user = ProfileBuilder.FromPrincipal(User);
    UserAccount author = Model.Author;

    Event e = Model.Event;
    bool votingOpen = e.GetCurrentState() == EventState.Voting;
    bool displayUser = e.GetCurrentState() == EventState.Closed;
    bool isSelfPost = user.ID == author.ID;
    bool canVote = votingOpen && !isSelfPost;
    bool hasVoted = DatabaseHelpers.Votes.GetVoteByUserOnEntry(user, Model) != null;
}

<div class="post"
    @(canVote ? $"entry-id={Model.DisplayID} allow-vote" : "")
    @(isSelfPost ? "self-post" : "") >
    @if(displayUser)
    {
        <div class="post-user">
            <a asp-controller="users" asp-action="display" asp-route-id="@author.DisplayID">
                <partial name="_Avatar" for="@author" />
                <p class="username">@author.Username</p>
            </a>
            <p class="post-date local-date" --unix-timestamp="@Model.SubmitDate.ToUnixSeconds()" --date-only>@Model.SubmitDate.ToString("dd/MM/yyyy")</p>
        </div>
    }
    <div class="post-image">
        <img src="/@Model.GetRelativeUrl()" />
    </div>

    <div class="post-toolbar">
        <span class="l">
            @if (canVote)
            {
                <span class="vote" onclick="toggleVote(this)" @(hasVoted ? "voted" : "")>
                    <i class="heart fas fa-heart"></i>
                    <i class="broken-heart fas fa-heart-broken"></i>
                    <span>Vote</span>
                    <span>d!</span>
                </span>
            }
        </span>
        <span class="r">
            <span class="report" title="Report this post" onclick="reportPost(this)">
                <i class="fas fa-flag"></i>
            </span>
        </span>
    </div>
</div>