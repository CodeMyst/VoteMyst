@using VoteMyst.Database
@using VoteMyst.Database.Models

@model Event
@{
    ulong revealUnix = Model.RevealDate.ToUnixSeconds();
    ulong startUnix = Model.StartDate.ToUnixSeconds();
    ulong endUnix = Model.EndDate.ToUnixSeconds();
    ulong voteEndUnix = Model.VoteEndDate.ToUnixSeconds();

    EventState eventState = Model.GetCurrentState();
}

<div class="event">
    <div class="event-info">
        <a class="event-title" asp-controller="events" asp-action="display" asp-route-id="@Model.Url">
            @Model.Title
            @if (eventState == EventState.Hidden) 
            {
                <span style="padding-left: 0.5rem; opacity: 0.5;">(hidden)</span>
            }
        </a>
        
        <p class="event-description">
            @(string.IsNullOrEmpty(Model.Description) ? "No description was provided." : Model.Description)
        </p>
    </div>

    <table class="event-dates">
        <tr>
            <th>@(eventState >= EventState.Ongoing ? "Event started" : "Event start")</th>
            <td class="start-date local-date" --unix-timestamp="@startUnix"></td>
        </tr>
        <tr>
            <th>@(eventState >= EventState.Voting ? "Submissions closed" : "Submissions close")</th>
            <td class="start-date local-date" --unix-timestamp="@endUnix"></td>
        </tr>
        <tr>
            <th>@(eventState >= EventState.Closed ? "Votings closed" : "Votings close")</th>
            <td class="start-date local-date" --unix-timestamp="@voteEndUnix"></td>
        </tr>
    </table>

    <div class="event-state">
        @switch(eventState)
        {
            case EventState.Hidden:
                <div class="timer" --unix-timestamp="@revealUnix">Reveal in</div>
                break;
            case EventState.Revealed:
                <div class="timer" --unix-timestamp="@startUnix">Starts in</div>
                break;
            case EventState.Ongoing:
                <div class="timer" --unix-timestamp="@endUnix">Submissions close in</div>
                break;
            case EventState.Voting:
                <div class="timer" --unix-timestamp="@voteEndUnix">Voting closes in</div>
                break;
            case EventState.Closed:
                <span>The event is over!</span>
                break;
        }
    </div>
</div>